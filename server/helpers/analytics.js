const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const ExcelJS = require('exceljs');
const { spawn } = require('child_process');

const { getTop5ByDept, getSubjectPassFailCount, getAllSubjectToppers } = require('./database');

// const data = require('../public/xlsx/analytics.json');
// const classTop5 = require('../public/xlsx/classTop5.json');
// const subjectPassFailCount = require('../public/xlsx/subjectPassFailCount.json');
// const subjectToppers = require('../public/xlsx/subjectToppers.json');

module.exports = {





    generate_Tables_XLSX: async (data, exam_id, programme, title) => {
        return new Promise(async (resolve, reject) => {

            let classTop5 = await getTop5ByDept(exam_id, programme);
            let subjectPassFailCount = await getSubjectPassFailCount(exam_id, programme);
            let subjectToppers = await getAllSubjectToppers(exam_id, programme);

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Analysis', {
                pageSetup: {
                    paperSize: 9,
                    orientation: 'Portrait',
                    fitToPage: true,
                    fitToWidth: 1,
                    fitToHeight: 0,
                    horizontalCentered: true,
                },
                headerFooter: {
                    oddHeader: '&R&H&"Times New Roman,Regular"&11' + title + '&L&H&"Times New Roman,Regular"&11Kristu Jyoti College of Management \& Technology',
                    oddFooter: '&L&H&"Times New Roman,Regular"&11Generated by MGU Result Scrapper&C&H&"Times New Roman,Regular"&11 Page &P of &N&R&H&"Times New Roman,Regular"&11Powered by Inovus Labs',
                },
            });



            // ------------------------------ Metadata ------------------------------ //



            workbook.creator = 'Inovus Labs';
            workbook.lastModifiedBy = 'Arjun Krishna';

            workbook.title = 'Result Analysis';
            workbook.subject = 'MGU Result Scrapper';
            workbook.category = 'MGU Result Scrapper';
            workbook.description = 'University Exam Result Analysis';
            workbook.keywords = 'MGU, Result, Scrapper, Analysis, University';
            workbook.company = 'Inovus Labs';

            workbook.created = new Date();
            workbook.modified = new Date();
            workbook.lastPrinted = new Date();

            worksheet.properties.defaultRowHeight = 25;
            worksheet.properties.defaultColWidth = 10;



            // ------------------------------ Overall Results Table ------------------------------ //



            worksheet.mergeCells('A4:C4');
            worksheet.getCell('A4').value = 'Overall Results';

            worksheet.getCell('A5').value = 'Pass';
            worksheet.getCell('B5').value = 'Fail';
            worksheet.getCell('C5').value = 'Total';

            worksheet.getCell('A6').value = data.overall.pass.count;
            worksheet.getCell('B6').value = data.overall.fail.count;
            worksheet.getCell('C6').value = data.overall.pass.count + data.overall.fail.count;



            // ------------------------------ Overall Results Table ------------------------------ //



            worksheet.mergeCells('E4:M4');
            worksheet.getCell('E4').value = 'Overall Grade Distribution';

            worksheet.getCell('E5').value = 'Grade';
            worksheet.getCell('E6').value = 'Count';

            Object.keys(data.overall.grades).forEach((key, index) => {
                worksheet.getCell(String.fromCharCode(70 + index) + '5').value = key;
                worksheet.getCell(String.fromCharCode(70 + index) + '6').value = data.overall.grades[key];
            });



            // ------------------------------ Subject-wise Results Table ------------------------------ //



            worksheet.mergeCells('A8:M8');
            worksheet.getCell('A8').value = 'Subject-wise Grade Distribution';

            worksheet.mergeCells(String.fromCharCode(65) + '9:' + String.fromCharCode(69) + '9');
            worksheet.getCell(String.fromCharCode(65) + '9').value = 'Subjects';

            for (let i = 0; i < data.subjects.length; i++) {
                worksheet.mergeCells(String.fromCharCode(65) + (10 + i) + ':' + String.fromCharCode(69) + (10 + i));
                worksheet.getCell(String.fromCharCode(65) + (10 + i)).value = data.subjects[i].name;
            }

            Object.keys(data.subjects[0].grades).forEach((key, index) => {
                worksheet.getCell(String.fromCharCode(70 + index) + '9').value = key;
            });

            for (let i = 0; i < data.subjects.length; i++) {
                Object.keys(data.subjects[i].grades).forEach((key, index) => {
                    worksheet.getCell(String.fromCharCode(70 + index) + (10 + i)).value = data.subjects[i].grades[key];
                });
            }



            // ------------------------------ Subject-wise Overall Results Table ------------------------------ //



            worksheet.mergeCells('A' + (11 + data.subjects.length) + ':G' + (11 + data.subjects.length));
            worksheet.getCell('A' + (11 + data.subjects.length)).value = 'Subject-wise Overall Results';

            for (let i = 0; i < data.subjects.length + 1; i++) {
                worksheet.mergeCells('A' + (12 + data.subjects.length + i) + ':E' + (12 + data.subjects.length + i));
            }

            worksheet.getCell('A' + (12 + data.subjects.length)).value = 'Subjects';
            worksheet.getCell('F' + (12 + data.subjects.length)).value = 'Pass';
            worksheet.getCell('G' + (12 + data.subjects.length)).value = 'Fail';

            for (let i = 0; i < data.subjects.length; i++) {
                worksheet.getCell('A' + (13 + data.subjects.length + i)).value = subjectPassFailCount[i].name;
                worksheet.getCell('F' + (13 + data.subjects.length + i)).value = subjectPassFailCount[i].pass;
                worksheet.getCell('G' + (13 + data.subjects.length + i)).value = subjectPassFailCount[i].fail;
            }



            // ------------------------------ Overall Toppers Table ------------------------------ //



            worksheet.mergeCells('I' + (11 + data.subjects.length) + ':O' + (11 + data.subjects.length));
            worksheet.getCell('I' + (11 + data.subjects.length)).value = 'Overall Toppers List';

            for (let i = 0; i < classTop5.length + 1; i++) {
                worksheet.mergeCells('J' + (12 + data.subjects.length + i) + ':L' + (12 + data.subjects.length + i));
            }

            worksheet.getCell('I' + (12 + data.subjects.length)).value = 'No:';
            worksheet.getCell('J' + (12 + data.subjects.length)).value = 'Name of the Student';
            worksheet.getCell('M' + (12 + data.subjects.length)).value = 'Marks';
            worksheet.getCell('N' + (12 + data.subjects.length)).value = 'SCPA';
            worksheet.getCell('O' + (12 + data.subjects.length)).value = 'Grade';

            for (let i = 0; i < classTop5.length; i++) {
                worksheet.getCell('I' + (13 + data.subjects.length + i)).value = i + 1;
                worksheet.getCell('J' + (13 + data.subjects.length + i)).value = classTop5[i].data.name;
                worksheet.getCell('M' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.total;
                worksheet.getCell('N' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.scpa;
                worksheet.getCell('O' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.grade;
            }



            // ------------------------------ Subject-wise Toppers Table ------------------------------ //


            let extraRows = 0;
            data.subjects.length > classTop5.length ? extraRows = data.subjects.length : extraRows = classTop5.length;

            extraRows = 9 + extraRows + data.subjects.length + 5;

            worksheet.mergeCells('A' + extraRows + ':M' + extraRows);
            worksheet.getCell('A' + extraRows).value = 'Subject-wise Toppers List';

            extraRows += 1;

            worksheet.mergeCells('A' + extraRows + ':E' + extraRows);
            worksheet.getCell('A' + extraRows).value = 'Subjects';

            worksheet.mergeCells('F' + extraRows + ':H' + extraRows);
            worksheet.getCell('F' + extraRows).value = 'Name of the Student';

            worksheet.getCell('I' + extraRows).value = 'Marks';
            worksheet.getCell('J' + extraRows).value = 'Grade';

            worksheet.mergeCells('K' + extraRows + ':M' + extraRows);
            worksheet.getCell('K' + extraRows).value = 'Name of the Teacher';

            extraRows += 1;
            
            let startRow = endRow = extraRows;


            for (let i = 0; i < subjectToppers.length; i++) {

                for (let j = 0; j < subjectToppers[i].toppers.length; j++) {
                    worksheet.mergeCells('F' + (startRow + j) + ':H' + (startRow + j));
                    worksheet.getCell('F' + (startRow + j)).value = subjectToppers[i].toppers[j].name;
                    
                    endRow = startRow + j;
                    // break;
                }
                
                worksheet.mergeCells('A' + (startRow) + ':E' + (endRow));
                worksheet.getCell('A' + (startRow)).value = subjectToppers[i].course_name;
                
                worksheet.mergeCells('I' + startRow + ':I' + endRow);
                worksheet.getCell('I' + startRow).value = subjectToppers[i].total;
                
                worksheet.mergeCells('J' + startRow + ':J' + endRow);
                worksheet.getCell('J' + startRow).value = subjectToppers[i].grade;
                
                worksheet.mergeCells('K' + startRow + ':M' + endRow);
                worksheet.getCell('K' + startRow).value = "Not Available";
                
                startRow = endRow + 1;
                // break;
            }
            


            // ------------------------------ Styling ------------------------------ //



            worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
                row.eachCell({ includeEmpty: false }, (cell, colNumber) => {

                    cell.alignment = {
                        wrapText: true,
                        vertical: 'middle',
                        horizontal: 'center'
                    }

                    row.height = 25;

                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    },

                        cell.font = {
                            name: 'Times New Roman',
                            size: 11,
                        }

                });

                // Subject-wise Grade Distribution Table
                if (rowNumber >= 9 && rowNumber <= 9 + data.subjects.length) {
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                        if (colNumber <= 5) {

                            cell.alignment = {
                                wrapText: true,
                                vertical: 'middle',
                                horizontal: 'left',
                                indent: 2,
                            }

                        }
                    });
                }

                // Subject-wise Overall Results Table & Overall Toppers Table
                if (rowNumber >= 9 + data.subjects.length + 2 && rowNumber <= 9 + data.subjects.length + data.subjects.length + 3) {
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                        if (colNumber <= 5 || (colNumber >= 10 && colNumber <= 12)) {

                            cell.alignment = {
                                wrapText: true,
                                vertical: 'middle',
                                horizontal: 'left',
                                indent: 2,
                            }

                        }
                    });
                }

                // Subject-wise Toppers Table
                if (rowNumber >= 9 + data.subjects.length + data.subjects.length + 5) {
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                        if (colNumber <= 8 || (colNumber >= 11 && colNumber <= 13)) {

                            cell.alignment = {
                                wrapText: true,
                                vertical: 'middle',
                                horizontal: 'left',
                                indent: 2,
                            }

                        }
                    });
                }

                // Dark Grey Rows
                if (rowNumber == 4 || rowNumber == 8 || rowNumber == 8 + data.subjects.length + 3 || rowNumber == 8 + data.subjects.length + data.subjects.length + 6) {
                    row.height = 35;
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {

                        cell.alignment = {
                            wrapText: true,
                            vertical: 'middle',
                            horizontal: 'center',
                        }

                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFD9D9D9' }
                        }

                    });
                }

                // Light Grey Rows
                if (rowNumber == 5 || rowNumber == 6 || rowNumber == 9 || rowNumber == 9 + data.subjects.length + 3 || rowNumber == 9 + data.subjects.length + data.subjects.length + 6) {
                    row.height = 30;
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFF2F2F2' }
                        }
                    });
                }
            });



            // ------------------------------ Write to XLSX file ------------------------------ //



            await workbook.xlsx.writeFile(path.join(__dirname, '../public/xlsx/Result Analysis.xlsx')).then(() => {
                console.log(chalk.greenBright("--- [table - generate_Tables_XLSX] --- Result Analysis file generated"));
                resolve({
                    status: "success",
                    message: "Result Analysis (Tables) xlsx generated",
                });
            }).catch((err) => {
                console.log(chalk.redBright("--- [table - generate_Tables_XLSX] --- Error generating Result Analysis file"));
                reject({
                    status: "error",
                    message: "Error generating Result Analysis (Tables) xlsx",
                    error: err
                });
            });

        });
    },





    fetch_Graphs: async (data, title) => {
        return new Promise(async (resolve, reject) => {


            let url = null;



            // ------------------------------ Overall Results Graph ------------------------------ //



            let overallResults = {
                series: [data.overall.pass.count, data.overall.fail.count],
                chart: {
                    type: 'pie',
                },
                title: {
                    text: 'Overall Results',
                    align: 'center',
                    margin: 20,
                    floating: false,
                    style: {
                        fontSize: '16px',
                        fontWeight: 'bold',
                        fontFamily: 'Times New Roman'
                    },
                },
                legend: {
                    position: 'right',
                    floating: false,
                    fontSize: '12px',
                    fontWeight: 'normal',
                    fontFamily: 'Times New Roman'
                },
                labels: ['Students Passed', 'Students Failed'],
            };


            url = "https://quickchart.io/apex-charts/render?width=500&height=300&config=" + JSON.stringify(overallResults);
            await module.exports.getProcessedImage(url, "overall_results.png");



            // ------------------------------ Overall Grade Distribution Graph ------------------------------ //


            let gradeWiseResults = [];
            Object.values(data.overall.grades).forEach((value) => {
                gradeWiseResults.push(value);
            });


            let overallGrades = {
                series: gradeWiseResults,
                chart: {
                    type: 'donut',
                },
                title: {
                    text: 'Overall Grade Distribution',
                    align: 'center',
                    margin: 20,
                    floating: false,
                    style: {
                        fontSize: '16px',
                        fontWeight: 'bold',
                        fontFamily: 'Times New Roman'
                    },
                },
                legend: {
                    position: 'right',
                    floating: false,
                    fontSize: '12px',
                    fontWeight: 'normal',
                    fontFamily: 'Times New Roman'
                },
                labels: ['S Grade', 'A%2B Grade', 'A Grade', 'B%2B Grade', 'B Grade', 'C Grade', 'D Grade', 'F Grade'],
            };


            url = "https://quickchart.io/apex-charts/render?width=500&height=300&config=" + JSON.stringify(overallGrades);
            await module.exports.getProcessedImage(url, "overall_grades.png");



            // ------------------------------ Subject-wise Results Graph ------------------------------ //



            let subjectNames = [];
            let subjectWisePass = [];
            let subjectWiseFail = [];

            for (let i = 0; i < data.subjects.length; i++) {
                subjectNames.push(data.subjects[i].name);
                subjectWisePass.push(data.subjects[i].pass.count);
                subjectWiseFail.push(data.subjects[i].fail.count);
            }


            let subjectWiseOverall = {
                series: [{
                    name: 'Students Passed',
                    data: subjectWisePass
                }, {
                    name: 'Students Failed',
                    data: subjectWiseFail
                }],
                chart: {
                    type: 'bar',
                    stacked: true,
                    stackType: '100%25'
                },
                plotOptions: {
                    bar: {
                        horizontal: true,
                    },
                },
                title: {
                    text: 'Subject-wise Overall Results',
                    align: 'center',
                    margin: 20,
                    floating: false,
                    style: {
                        fontSize: '16px',
                        fontWeight: 'bold',
                        fontFamily: 'Times New Roman'
                    },
                },
                xaxis: {
                    categories: subjectNames,
                },
                legend: {
                    position: 'top',
                    floating: false,
                    fontSize: '12px',
                    fontWeight: 'normal',
                    fontFamily: 'Times New Roman'
                },
                labels: ['Students Passed', 'Students Failed'],
            };
            
            url = "https://quickchart.io/apex-charts/render?width=900&height=350&config=" + JSON.stringify(subjectWiseOverall);
            await module.exports.getProcessedImage(url, "subjectwise_overall.png");



            // ------------------------------ Subject-wise Overall Graph (Single) ------------------------------ //



            // loop for each subject
            for (let i = 0; i < data.subjects.length; i++) {

                let subjectResults = {
                    series: [data.subjects[i].pass.count, data.subjects[i].fail.count],
                    chart: {
                        type: 'pie',
                    },
                    title: {
                        text: 'Overall Results',
                        align: 'center',
                        margin: 20,
                        floating: false,
                        style: {
                            fontSize: '16px',
                            fontWeight: 'bold',
                            fontFamily: 'Times New Roman'
                        },
                    },
                    legend: {
                        position: 'right',
                        floating: false,
                        fontSize: '12px',
                        fontWeight: 'normal',
                        fontFamily: 'Times New Roman'
                    },
                    labels: ['Students Passed', 'Students Failed'],
                };
    
    
                url = "https://quickchart.io/apex-charts/render?width=500&height=300&config=" + JSON.stringify(subjectResults);
                await module.exports.getProcessedImage(url, "subject_" + i + "_overall_results.png");

            }



            // ------------------------------ Subject-wise Grade Distribution Graph (Single) ------------------------------ //



            // loop for each subject
            for (let i = 0; i < data.subjects.length; i++) {

                let subjectWiseGrades = [];
                Object.values(data.subjects[i].grades).forEach((value) => {
                    subjectWiseGrades.push(value);
                });
    

                let subjectGrades = {
                    series: subjectWiseGrades,
                    chart: {
                        type: 'donut',
                    },
                    title: {
                        text: 'Overall Grade Distribution',
                        align: 'center',
                        margin: 20,
                        floating: false,
                        style: {
                            fontSize: '16px',
                            fontWeight: 'bold',
                            fontFamily: 'Times New Roman'
                        },
                    },
                    legend: {
                        position: 'right',
                        floating: false,
                        fontSize: '12px',
                        fontWeight: 'normal',
                        fontFamily: 'Times New Roman'
                    },
                    labels: ['S Grade', 'A%2B Grade', 'A Grade', 'B%2B Grade', 'B Grade', 'C Grade', 'D Grade', 'F Grade'],
                };
    
    
                url = "https://quickchart.io/apex-charts/render?width=500&height=300&config=" + JSON.stringify(subjectGrades);
                await module.exports.getProcessedImage(url, "subject_" + i + "_overall_grades.png");

            }

            let generate_Graph = await module.exports.generate_Graphs_XLSX(data, title);
            resolve(generate_Graph);

        });
    },





    generate_Graphs_XLSX: async (data, title) => {
        return new Promise(async (resolve, reject) => {


            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Analysis', {
                pageSetup: {
                    paperSize: 9,
                    orientation: 'Portrait',
                    fitToPage: true,
                    fitToWidth: 1,
                    fitToHeight: 0,
                    horizontalCentered: true,
                },
                headerFooter: {
                    oddHeader: '&R&H&"Times New Roman,Regular"&11' + title + '&L&H&"Times New Roman,Regular"&11Kristu Jyoti College of Management \& Technology',
                    oddFooter: '&L&H&"Times New Roman,Regular"&11Generated by MGU Result Scrapper&C&H&"Times New Roman,Regular"&11 Page &P of &N&R&H&"Times New Roman,Regular"&11Powered by Inovus Labs',
                },
            });



            // ------------------------------ Metadata ------------------------------ //



            workbook.creator = 'Inovus Labs';
            workbook.lastModifiedBy = 'Arjun Krishna';

            workbook.title = 'Result Visualisation';
            workbook.subject = 'MGU Result Scrapper';
            workbook.category = 'MGU Result Scrapper';
            workbook.description = 'University Exam Result Analysis';
            workbook.keywords = 'MGU, Result, Scrapper, Analysis, University';
            workbook.company = 'Inovus Labs';

            workbook.created = new Date();
            workbook.modified = new Date();
            workbook.lastPrinted = new Date();

            worksheet.properties.defaultRowHeight = 25;
            worksheet.properties.defaultColWidth = 10;

            worksheet.getColumn('G').width = 3;



            // ------------------------------ Overall Results Graph ------------------------------ //



            let overall_results = workbook.addImage({
                filename: path.join(__dirname, '../public/graphs/overall_results.png'),
                extension: 'png',
            });

            worksheet.addImage(overall_results, {
                tl: { col: 0, row: 0 },
                br: { col: 6, row: 10 },
                editAs: 'oneCell'
            });



            // ------------------------------ Overall Grade Distribution Graph ------------------------------ //



            let overall_grades = workbook.addImage({
                filename: path.join(__dirname, '../public/graphs/overall_grades.png'),
                extension: 'png',
            });

            worksheet.addImage(overall_grades, {
                tl: { col: 7, row: 0 },
                br: { col: 13, row: 10 },
                editAs: 'oneCell'
            });



            // ------------------------------ Subject-wise Grade Distribution Graph ------------------------------ //



            let subjectwise_overall = workbook.addImage({
                filename: path.join(__dirname, '../public/graphs/subjectwise_overall.png'),
                extension: 'png',
            });

            worksheet.addImage(subjectwise_overall, {
                tl: { col: 0, row: 11 },
                br: { col: 13, row: 23 },
                editAs: 'oneCell'
            });



            // ------------------------------ Subject-wise Overall Graph (Single) ------------------------------ //


            let startRow = 25;

            for (let i = 0; i < data.subjects.length; i++) {

                worksheet.mergeCells('A' + startRow + ':M' + startRow);
                worksheet.getCell('A' + startRow).value = data.subjects[i].name;

                if(i >= 2 ) {
                    worksheet.getRow(startRow - 1).height = 20;
                    worksheet.getRow(startRow + 1).height = 20;
                }

                worksheet.getRow(startRow).height = 35;
                
                worksheet.getCell('A' + startRow).alignment = {
                    wrapText: true,
                    vertical: 'middle',
                    horizontal: 'center',
                }
                
                worksheet.getCell('A' + startRow).fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'FFF2F2F2' }
                }

                worksheet.getCell('A' + startRow).font = {
                    name: 'Times New Roman',
                    size: 12,
                }

                worksheet.getCell('A' + startRow).border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                }

                // ------------------------------------------------------------ //

                let subject_overall = workbook.addImage({
                    filename: path.join(__dirname, '../public/graphs/subject_' + i + '_overall_results.png'),
                    extension: 'png',
                });

                let subject_grade = workbook.addImage({
                    filename: path.join(__dirname, '../public/graphs/subject_' + i + '_overall_grades.png'),
                    extension: 'png',
                });

                worksheet.addImage(subject_overall, {
                    tl: { col: 0, row: startRow + 1 },
                    br: { col: 6, row: startRow + 11 },
                    editAs: 'oneCell'
                });

                worksheet.addImage(subject_grade, {
                    tl: { col: 7, row: startRow + 1 },
                    br: { col: 13, row: startRow + 11 },
                    editAs: 'oneCell'
                });

                startRow += 13;

            }

            let endRow = startRow - 2;
            worksheet.pageSetup.printArea = 'A1:M' + endRow;



            // ------------------------------ Write to XLSX file ------------------------------ //



            workbook.xlsx.writeFile(path.join(__dirname, '../public/xlsx/Result Graphs.xlsx')).then(() => {
                console.log(chalk.greenBright("--- [graph - generate_Graphs_XLSX] --- Result Analysis file generated"));
                resolve({
                    status: "success",
                    message: "Result Analysis (Graphs) xlsx generated",
                });
            }).catch((err) => {
                console.log(chalk.redBright("--- [graph - generate_Graphs_XLSX] --- Error generating Result Analysis file"));
                reject({
                    status: "error",
                    message: "Error generating Result Analysis (Graphs) xlsx",
                    error: err
                });
            });

        });
    },





    downloadImage: (url, filename) => {
        return new Promise((resolve, reject) => {

            const https = require('https');
            const fs = require('fs');

            let file = fs.createWriteStream(path.join(__dirname, '../public/graphs/' + filename));

            https.get(url, function (response) {
                response.pipe(file);
                file.on('finish', function () {
                    file.close();
                    resolve(path.join(__dirname, '../public/graphs/' + filename));
                });
            }).on('error', function (err) {
                fs.unlink(path.join(__dirname, '../public/graphs/' + filename));
                reject(err);
            });

        });
    },





    getProcessedImage: async (url, filename) => {
        return new Promise(async (resolve, reject) => {

            let image = await module.exports.downloadImage(url, filename);
            image = image.replace(/\\/g, '\\\\');

            let child = spawn('python', ['helpers/graph_border.py', image]);

            // child.stdout.on('data', (data) => {
            //     console.log(`stdout: ${data}`);
            // });

            child.stderr.on('data', (data) => {
                console.error(`stderr: ${data}`);
                reject();
            });

            child.on('close', (code) => {
                // console.log(`child process exited with code ${code}`);
                resolve();
            });

        });
    },





};