const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const ExcelJS = require('exceljs');


const { getDataByDept } = require('./database');
const cons_sheet = require('./cons_sheet_xlsx');
// const data = require('../public/xlsx/data.json');

module.exports = {


    // Generate XLSX file
    generate_XLSX : async (exam_id, programme, title) => {
        return new Promise(async (resolve, reject) => {

            await getDataByDept(exam_id, programme).then(async (data) => {

                let resultStats = {
                    overall : {
                        pass : {
                            count : 0,
                        },
                        fail : {
                            count : 0,
                            index : [],
                            names : [],
                        },
                        grades: {
                            "S" : 0,
                            "A+" : 0,
                            "A" : 0,
                            "B+" : 0,
                            "B" : 0,
                            "C" : 0,
                            "D" : 0,
                            "F" : 0,
                        }
                    },
                    subjects : [],

                }

                const workbook = new ExcelJS.Workbook();
                const worksheet = workbook.addWorksheet('Results', {
                    pageSetup: { 
                        paperSize: 8,
                        orientation: 'landscape',
                        fitToPage: true,
                        fitToWidth: 1,
                        fitToHeight: 0,
                        horizontalCentered: true,
                    },
                    headerFooter: {
                        oddHeader: '&R&H&"Times New Roman,Regular"&11' + title + '&L&H&"Times New Roman,Regular"&11Kristu Jyoti College of Management \& Technology',
                        oddFooter: '&L&H&"Times New Roman,Regular"&11Generated by MGU Result Scrapper&C&H&"Times New Roman,Regular"&11 Page &P of &N&R&H&"Times New Roman,Regular"&11Powered by Inovus Labs',
                    },
                });


                
                // Add metadata to the XLSX file
                workbook.creator = 'Inovus Labs';
                workbook.lastModifiedBy = 'Arjun Krishna';

                workbook.title = 'OBE Datasheet';
                workbook.subject = 'MGU Result Scrapper';
                workbook.category = 'MGU Result Scrapper';
                workbook.description = 'OBE Datasheet of all students';
                workbook.keywords = 'MGU, Result, Scrapper, OBE, Datasheet, Marklist';
                workbook.company = 'Inovus Labs';

                workbook.created = new Date();
                workbook.modified = new Date();
                workbook.lastPrinted = new Date();



                worksheet.properties.defaultRowHeight = 25;
                worksheet.properties.defaultColWidth = 9;

                worksheet.getColumn('A').width = 20;
                worksheet.getColumn('B').width = 30;
        
                worksheet.mergeCells('A4:A5');
                worksheet.mergeCells('B4:B5');


                
                // Populate the XLSX file with data, column wise
                await cons_sheet.getDataAsArray(data, resultStats).then((response) => {
                    
                    worksheet.getColumn('A').values = [null, null, null, null, "Register Number", ...response.results.prn];
                    worksheet.getColumn('B').values = [null, null, null, null, "Name", ...response.results.names];
                    
                    // Subject wise marks and grades
                    for(let i = 0; i <= response.results.subjects.length; i++) {

                        let cell_11 = String.fromCharCode(67 + (i * 4)) + "4";
                        let cell_12 = String.fromCharCode(70 + (i * 4)) + "4";

                        // if column exceeds "Z", then start from "AA", "AB", etc.
                        if(i >= 6) {
                            cell_11 = "A" + String.fromCharCode(65 + (i - 6) * 4) + "4";
                            cell_12 = "A" + String.fromCharCode(68 + (i - 6) * 4) + "4";
                        }
                        
                        // If the loop is at the last iteration (<=), then its the overall section
                        // Else, add the subject wise marks and grades
                        if(i == response.results.subjects.length) {

                            worksheet.mergeCells(cell_11 + ":" + cell_12);
                            
                            if(i >= 6) {
                                worksheet.getColumn("A" + String.fromCharCode(65 + (i - 6) * 4)).values = [null, null, null, null, "Marks", ...response.results.overall.marks];
                                worksheet.getColumn("A" + String.fromCharCode(66 + (i - 6) * 4)).values = [null, null, null, null, "CP", ...response.results.overall.cp];
                                worksheet.getColumn("A" + String.fromCharCode(67 + (i - 6) * 4)).values = [null, null, null, null, "Grade", ...response.results.overall.grade];
                                worksheet.getColumn("A" + String.fromCharCode(68 + (i - 6) * 4)).values = [null, null, null, "Overall", "SGPA", ...response.results.overall.sgpa];
                            } else {
                                worksheet.getColumn(String.fromCharCode(67 + (i * 4))).values = [null, null, null, null, "Marks", ...response.results.overall.marks];
                                worksheet.getColumn(String.fromCharCode(68 + (i * 4))).values = [null, null, null, null, "CP", ...response.results.overall.cp];
                                worksheet.getColumn(String.fromCharCode(69 + (i * 4))).values = [null, null, null, null, "Grade", ...response.results.overall.grade];
                                worksheet.getColumn(String.fromCharCode(70 + (i * 4))).values = [null, null, null, "Overall", "SGPA", ...response.results.overall.sgpa];
                            }
                            
                        } else {

                            worksheet.mergeCells(cell_11 + ":" + cell_12);
                            
                            if(i >= 6) {
                                worksheet.getColumn("A" + String.fromCharCode(65 + (i - 6) * 4)).values = [null, null, null, null, "ISA", ...response.results.subjects[i].isa];
                                worksheet.getColumn("A" + String.fromCharCode(66 + (i - 6) * 4)).values = [null, null, null, null, "ESA", ...response.results.subjects[i].esa];
                                worksheet.getColumn("A" + String.fromCharCode(67 + (i - 6) * 4)).values = [null, null, null, null, "Marks", ...response.results.subjects[i].marks];
                                worksheet.getColumn("A" + String.fromCharCode(68 + (i - 6) * 4)).values = [null, null, null, response.subjectList[i], "Grade", ...response.results.subjects[i].grade];
                            } else {
                                worksheet.getColumn(String.fromCharCode(67 + (i * 4))).values = [null, null, null, null, "ISA", ...response.results.subjects[i].isa];
                                worksheet.getColumn(String.fromCharCode(68 + (i * 4))).values = [null, null, null, null, "ESA", ...response.results.subjects[i].esa];
                                worksheet.getColumn(String.fromCharCode(69 + (i * 4))).values = [null, null, null, null, "Marks", ...response.results.subjects[i].marks];
                                worksheet.getColumn(String.fromCharCode(70 + (i * 4))).values = [null, null, null, response.subjectList[i], "Grade", ...response.results.subjects[i].grade];
                            }

                        }
                        
                    }
                    
                    
                }).catch((err) => {
                    console.log(chalk.redBright("--- [xlsx - generate_XLSX] --- Error in getting data as array: " + err));
                    reject({
                        status: "error",
                        message: "Error in getting data as array: ",
                        error: err
                    });
                });



                // Styling the XLSX file (fonts, borders, alignment, etc.)
                worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
                    row.eachCell({ includeEmpty: false }, (cell, colNumber) => {

                        if(colNumber == 2 && rowNumber > 5) {
                            cell.alignment = {
                                wrapText: true,
                                vertical: 'middle',
                                horizontal: 'left',
                                indent: 1,
                            }
                        } else {
                            cell.alignment = {
                                wrapText: true,
                                vertical: 'middle',
                                horizontal: 'center'
                            }
                        }

                        cell.border = {
                            top: { style:'thin' },
                            left: { style:'thin' },
                            bottom: { style:'thin' },
                            right: { style:'thin' }
                        },

                        cell.font = {
                            name: 'Times New Roman',
                            size: 11,
                        }

                    });

                    if(rowNumber == 4) {
                        row.height = 75;
                    } else {
                        row.height = 25;
                    }

                    // if rowNumber exists in resultStats, then highlight the row
                    if(resultStats.overall.fail.index.includes(rowNumber - 6)) {
                        row.eachCell({ includeEmpty: false }, (cell, colNumber) => {
                            cell.fill = {
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFFABF8F' },
                                bgColor: { argb: 'FFFABF8F' }
                            }
                        });
                    }


                    // if any subject was skipped, then highlight the cells using grey color
                    for(let i = 0; i < resultStats.subjects.length; i++) {
                        if(resultStats.subjects[i].skip.index.includes(rowNumber - 6)) {
                            
                            let cell_1 = String.fromCharCode(67 + (i * 4));
                            let cell_2 = String.fromCharCode(68 + (i * 4));
                            let cell_3 = String.fromCharCode(69 + (i * 4));
                            let cell_4 = String.fromCharCode(70 + (i * 4));

                            // if column exceeds "Z", then start from "AA", "AB", etc.
                            if(i >= 6) {
                                cell_1 = "A" + String.fromCharCode(65 + (i - 6) * 4);
                                cell_2 = "A" + String.fromCharCode(66 + (i - 6) * 4);
                                cell_3 = "A" + String.fromCharCode(67 + (i - 6) * 4);
                                cell_4 = "A" + String.fromCharCode(68 + (i - 6) * 4);
                            }

                            row.getCell(cell_1).fill = {
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFF0F0F0' },
                                bgColor: { argb: 'FFF0F0F0' }
                            }
                            row.getCell(cell_2).fill = {
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFF0F0F0' },
                                bgColor: { argb: 'FFF0F0F0' }
                            }
                            row.getCell(cell_3).fill = {
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFF0F0F0' },
                                bgColor: { argb: 'FFF0F0F0' }
                            }
                            row.getCell(cell_4).fill = {
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFF0F0F0' },
                                bgColor: { argb: 'FFF0F0F0' }
                            }
                            
                        }
                    }

                });



                // Write data to XLSX file
                await workbook.xlsx.writeFile(path.join(__dirname, '../public/xlsx/OBE Datasheet.xlsx')).then(() => {
                    console.log(chalk.greenBright("--- [xlsx - generate_XLSX] --- OBE Datasheet generated successfully."));
                    resolve({
                        status: "success",
                        message: "OBE Datasheet generated successfully.",
                        resultStats: resultStats,
                    });
                }).catch((err) => {
                    console.log(chalk.redBright("--- [xlsx - generate_XLSX] --- Error in writing data to XLSX file: "));
                    reject({
                        status: "error",
                        message: "Error in writing OBE Datasheet: ",
                        error: err
                    });
                });


                
            }).catch((err) => {
                console.log(chalk.redBright("--- [xlsx - generate_XLSX] --- Error in fetching data from database: " + err));
                reject({
                    status: "error",
                    message: "Error in fetching data from database: ",
                    error: err
                });
            });

        });
    },




};


