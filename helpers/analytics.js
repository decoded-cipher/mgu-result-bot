const fs = require('fs');
const path = require('path');
const ExcelJS = require('exceljs');

const { getTop5ByDept } = require('./database');
const data = require('../public/xlsx/analytics.json');
const classTop5 = require('../public/xlsx/classTop5.json');

module.exports = {

    generate_XLSX: async () => {
        return new Promise(async (resolve, reject) => {

            // let classTop5 = await getTop5ByDept();




            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Analysis', {
                pageSetup: { 
                    paperSize: 9,
                    orientation: 'landscape',
                    fitToPage: true,
                    fitToWidth: 1,
                    fitToHeight: 0,
                    horizontalCentered: true,
                },
                headerFooter: {
                    oddHeader: '&R&H&"Times New Roman,Regular"&11BCA Degree (C.B.C.S) University Examination Results&L&H&"Times New Roman,Regular"&11Kristu Jyoti College of Management \& Technology',
                    oddFooter: '&L&H&"Times New Roman,Regular"&11Generated by MGU Result Scrapper&C&H&"Times New Roman,Regular"&11 Page &P of &N&R&H&"Times New Roman,Regular"&11Powered by Inovus Labs',
                },
            });



            // Add metadata to the XLSX file
            workbook.creator = 'Inovus Labs';
            workbook.lastModifiedBy = 'Arjun Krishna';

            workbook.title = 'Result Analysis';
            workbook.subject = 'MGU Result Scrapper';
            workbook.category = 'MGU Result Scrapper';
            workbook.description = 'University Exam Result Analysis';
            workbook.keywords = 'MGU, Result, Scrapper, Analysis, University';
            workbook.company = 'Inovus Labs';

            workbook.created = new Date();
            workbook.modified = new Date();
            workbook.lastPrinted = new Date();

            worksheet.properties.defaultRowHeight = 25;
            worksheet.properties.defaultColWidth = 10;



            // Overall Results Table
            worksheet.mergeCells('A4:C4');
            worksheet.getCell('A4').value = 'Overall Results';

            worksheet.getCell('A5').value = 'Pass';
            worksheet.getCell('B5').value = 'Fail';
            worksheet.getCell('C5').value = 'Total';

            worksheet.getCell('A6').value = data.overall.pass.count;
            worksheet.getCell('B6').value = data.overall.fail.count;
            worksheet.getCell('C6').value = data.overall.pass.count + data.overall.fail.count;


            // Overall Grade Distribution Table
            worksheet.mergeCells('E4:M4');
            worksheet.getCell('E4').value = 'Overall Grade Distribution';

            worksheet.getCell('E5').value = 'Grade';
            worksheet.getCell('E6').value = 'Count';

            Object.keys(data.overall.grades).forEach((key, index) => {
                worksheet.getCell(String.fromCharCode(70 + index) + '5').value = key;
                worksheet.getCell(String.fromCharCode(70 + index) + '6').value = data.overall.grades[key];
            });


            // Subject-wise Grade Distribution Table
            worksheet.mergeCells('A8:M8');
            worksheet.getCell('A8').value = 'Subject-wise Grade Distribution';

            worksheet.mergeCells(String.fromCharCode(65) + '9:' + String.fromCharCode(69) + '9');
            worksheet.getCell(String.fromCharCode(65) + '9').value = 'Subjects';

            for (let i = 0; i < data.subjects.length; i++) {
                worksheet.mergeCells(String.fromCharCode(65) + (10 + i) + ':' + String.fromCharCode(69) + (10 + i));
                worksheet.getCell(String.fromCharCode(65) + (10 + i)).value = data.subjects[i].name;
            }

            Object.keys(data.subjects[0].grades).forEach((key, index) => {
                worksheet.getCell(String.fromCharCode(70 + index) + '9').value = key;
            });

            for (let i = 0; i < data.subjects.length; i++) {
                Object.keys(data.subjects[i].grades).forEach((key, index) => {
                    worksheet.getCell(String.fromCharCode(70 + index) + (10 + i)).value = data.subjects[i].grades[key];
                });
            }



            // Overall Toppers Table
            worksheet.mergeCells('A' + (11 + data.subjects.length) + ':L' + (11 + data.subjects.length));
            worksheet.getCell('A' + (11 + data.subjects.length)).value = 'Overall Toppers List';

            for(let i = 0; i < classTop5.length + 1; i++) {
                worksheet.mergeCells('B' + (12 + data.subjects.length + i) + ':E' + (12 + data.subjects.length + i));
                worksheet.mergeCells('F' + (12 + data.subjects.length + i) + ':I' + (12 + data.subjects.length + i));
            }

            worksheet.getCell('A' + (12 + data.subjects.length)).value = 'No:';
            worksheet.getCell('B' + (12 + data.subjects.length)).value = 'Permenant Registation Number';
            worksheet.getCell('F' + (12 + data.subjects.length)).value = 'Name of the Student';
            worksheet.getCell('J' + (12 + data.subjects.length)).value = 'Marks';
            worksheet.getCell('K' + (12 + data.subjects.length)).value = 'SCPA';
            worksheet.getCell('L' + (12 + data.subjects.length)).value = 'Grade';

            for(let i = 0; i < classTop5.length; i++) {
                worksheet.getCell('A' + (13 + data.subjects.length + i)).value = i + 1;
                worksheet.getCell('B' + (13 + data.subjects.length + i)).value = classTop5[i].data.prn;
                worksheet.getCell('F' + (13 + data.subjects.length + i)).value = classTop5[i].data.name;
                worksheet.getCell('J' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.total;
                worksheet.getCell('K' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.scpa;
                worksheet.getCell('L' + (13 + data.subjects.length + i)).value = classTop5[i].data.result.grade;

                // worksheet.getCell('B' + (13 + data.subjects.length + i)).numFmt = '0';
            }

            









            


















            

            // Styling the XLSX file (fonts, borders, alignment, etc.)
            worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
                row.eachCell({ includeEmpty: false }, (cell, colNumber) => {

                    cell.alignment = {
                        wrapText: true,
                        vertical: 'middle',
                        horizontal: 'center'
                    }

                    cell.border = {
                        top: { style:'thin' },
                        left: { style:'thin' },
                        bottom: { style:'thin' },
                        right: { style:'thin' }
                    },

                    cell.font = {
                        name: 'Times New Roman',
                        size: 11,
                    }

                });
            });



            // Write data to XLSX file
            await workbook.xlsx.writeFile(path.join(__dirname, '../public/xlsx/Result Analysis.xlsx')).then(() => {
                console.log("Result Analysis file generated");
                resolve({
                    status: "success",
                    message: "Result Analysis file generated",
                });
            });




        });
    }


};